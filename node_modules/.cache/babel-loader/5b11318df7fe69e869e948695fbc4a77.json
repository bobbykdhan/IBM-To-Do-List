{"ast":null,"code":"var _jsxFileName = \"/Users/bobby/Desktop/to_do_list_week6-bobbykdhan-main/src/component/todos.js\";\nimport React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, Grid, ListItemButton, ListItemText, Checkbox } from \"@mui/material\"; // 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = _ref => {\n  let {\n    todos,\n    deleteTodo\n  } = _ref;\n  const todoList = todos.length ? todos.map(todo => {\n    let color = \"#ffffffff\";\n\n    if (new Date(todo.duedate) < new Date()) {\n      color = 'red';\n    }\n\n    console.log(color);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        \"data-testid\": todo.content,\n        style: {\n          marginTop: 10,\n          background: color\n        },\n        children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n          component: \"a\",\n          href: \"#simple-list\",\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            style: {\n              paddingLeft: 0\n            },\n            color: \"primary\",\n            onClick: () => deleteTodo(todo.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: todo.content,\n            secondary: todo.duedate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this);\n  }) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You have no todo's left \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this); // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoCollection\",\n    style: {\n      padding: \"10px\"\n    },\n    children: todoList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"names":["React","Card","Grid","ListItemButton","ListItemText","Checkbox","Todos","todos","deleteTodo","todoList","length","map","todo","color","Date","duedate","console","log","content","marginTop","background","paddingLeft","id","padding"],"sources":["/Users/bobby/Desktop/to_do_list_week6-bobbykdhan-main/src/component/todos.js"],"sourcesContent":["import React from \"react\";\nimport \"../component/todos.css\";\nimport { Card, Grid, ListItemButton, ListItemText, Checkbox} from \"@mui/material\";\n\n// 1. This component formats and returns the list of todos.\n// 2. Treat the question mark like an if statement.\n// If the todos array has items in the list [todos.length], we want to return the list\n// Else, return a message saying \"You have no todo's left\"\n// 3. The map function is called to assign each array item with a key\n// 4. Think of lines 14-23 as a loop. For each todo in the todo list, we want to give the list item\n// a key, and it's own card shown in the UI\nconst Todos = ({ todos, deleteTodo }) => {\n  const todoList = todos.length ? (\n    todos.map((todo) => {\n      let color = \"#ffffffff\"\n      if (new Date(todo.duedate) < new Date()){\n        color = 'red'\n      }\n      console.log(color)\n      return (\n        <Grid key={todo.id}>\n          <Card data-testid={todo.content} style={{marginTop:10, background: color}}>\n            {/* Remember, we set the local state of this todo item when the user submits the form in \n            AddTodo.js. All we need to do is return the todo list item {todo.content} as well as its \n            current date/time {todo.date}. Also, the item's id is utilized in order to correctly delete an item from the Todo list*/}\n            <ListItemButton component=\"a\" href=\"#simple-list\">\n              <Checkbox style={{paddingLeft:0}} color=\"primary\" onClick={() => deleteTodo(todo.id)}/>\n              <ListItemText primary={todo.content} secondary={todo.duedate}/>\n            </ListItemButton>\n          </Card>\n        </Grid>\n      );\n    })\n  ) : (\n    <p>You have no todo's left </p>\n  );\n  // Lastly, return the todoList constant that we created above to show all of the items on the screen.\n  return (\n    <div className=\"todoCollection\" style={{ padding: \"10px\" }}>\n      {todoList}\n    </div>\n  );\n};\n\nexport default Todos;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,cAArB,EAAqCC,YAArC,EAAmDC,QAAnD,QAAkE,eAAlE,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,QAA2B;EAAA,IAA1B;IAAEC,KAAF;IAASC;EAAT,CAA0B;EACvC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,GACfH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;IAClB,IAAIC,KAAK,GAAG,WAAZ;;IACA,IAAI,IAAIC,IAAJ,CAASF,IAAI,CAACG,OAAd,IAAyB,IAAID,IAAJ,EAA7B,EAAwC;MACtCD,KAAK,GAAG,KAAR;IACD;;IACDG,OAAO,CAACC,GAAR,CAAYJ,KAAZ;IACA,oBACE,QAAC,IAAD;MAAA,uBACE,QAAC,IAAD;QAAM,eAAaD,IAAI,CAACM,OAAxB;QAAiC,KAAK,EAAE;UAACC,SAAS,EAAC,EAAX;UAAeC,UAAU,EAAEP;QAA3B,CAAxC;QAAA,uBAIE,QAAC,cAAD;UAAgB,SAAS,EAAC,GAA1B;UAA8B,IAAI,EAAC,cAAnC;UAAA,wBACE,QAAC,QAAD;YAAU,KAAK,EAAE;cAACQ,WAAW,EAAC;YAAb,CAAjB;YAAkC,KAAK,EAAC,SAAxC;YAAkD,OAAO,EAAE,MAAMb,UAAU,CAACI,IAAI,CAACU,EAAN;UAA3E;YAAA;YAAA;YAAA;UAAA,QADF,eAEE,QAAC,YAAD;YAAc,OAAO,EAAEV,IAAI,CAACM,OAA5B;YAAqC,SAAS,EAAEN,IAAI,CAACG;UAArD;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA;MAJF;QAAA;QAAA;QAAA;MAAA;IADF,GAAWH,IAAI,CAACU,EAAhB;MAAA;MAAA;MAAA;IAAA,QADF;EAaD,CAnBD,CADe,gBAsBf;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAtBF,CADuC,CAyBvC;;EACA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAgC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAX,CAAvC;IAAA,UACGd;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA/BD;;KAAMH,K;AAiCN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}